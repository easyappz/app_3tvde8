openapi: 3.0.3
info:
  title: Easyappz API
  version: 1.5.1
  description: |
    Authentication, Ads and Comments endpoints for Easyappz service.
    All tokens are standard JWT passed in Authorization header.
servers:
  - url: /api
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: |
        Creates a user with email verification required. Sends a verification email and does not return JWT at this step.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 6
                  example: strongpassword
      responses:
        '201':
          description: Verification email has been sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  verifyEmailSent:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Письмо с подтверждением отправлено"
              examples:
                success:
                  value:
                    success: true
                    verifyEmailSent: true
                    message: "Письмо с подтверждением отправлено"
        '400':
          description: Validation error
          content:
            application/json:
              examples:
                missing:
                  value:
                    success: false
                    error: Email and password are required
                invalidEmail:
                  value:
                    success: false
                    error: Invalid email format
                weakPassword:
                  value:
                    success: false
                    error: Password must be at least 6 characters
        '409':
          description: Duplicate email
          content:
            application/json:
              examples:
                duplicate:
                  value:
                    success: false
                    error: Email already registered
        '500':
          description: Server error
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: Failed to send verification email
  /auth/verify-email:
    get:
      summary: Verify user's email by token
      description: |
        Confirms email using a token. If valid and not expired, marks user as verified and immediately returns JWT and user profile.
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: Email verification token from the email link
      responses:
        '200':
          description: Email verified and user authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT token to be used in Authorization header
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 65f2d1b2c8a4f21f1c111111
                      email:
                        type: string
                        example: user@example.com
                      createdAt:
                        type: string
                        format: date-time
              examples:
                success:
                  value:
                    success: true
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    user:
                      id: 65f2d1b2c8a4f21f1c111111
                      email: user@example.com
                      createdAt: 2025-01-01T12:00:00.000Z
        '400':
          description: Invalid or expired token
          content:
            application/json:
              examples:
                invalid:
                  value:
                    success: false
                    error: Invalid or expired token
        '500':
          description: Server error
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: Verification failed
  /auth/login:
    post:
      summary: Login user
      description: Validates credentials and returns JWT token with user profile. Login is blocked until email is verified.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
              examples:
                success:
                  value:
                    success: true
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    user:
                      id: 65f2d1b2c8a4f21f1c111111
                      email: user@example.com
                      createdAt: 2025-01-01T12:00:00.000Z
        '400':
          description: Validation error
          content:
            application/json:
              examples:
                missing:
                  value:
                    success: false
                    error: Email and password are required
        '401':
          description: Invalid credentials
          content:
            application/json:
              examples:
                invalid:
                  value:
                    success: false
                    error: Invalid email or password
        '403':
          description: Email not verified
          content:
            application/json:
              examples:
                notVerified:
                  value:
                    success: false
                    error: Email not verified
        '500':
          description: Server error
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: Login failed
  /ads/resolve:
    post:
      summary: Resolve Avito URL and create or return existing Ad
      description: |
        Accepts an Avito listing URL. If an Ad with the same URL already exists, returns it.
        Otherwise the service fetches the page with retries and realistic headers, parses title and cover image, creates Ad with views=0 and returns it.

        Resilience and caching:
        - The service retries fetching with exponential backoff and random User-Agent/headers to mitigate 429/403/503.
        - Results of parsing are cached in-memory by normalized URL for 24 hours to avoid repeated requests to Avito.
        - Final Ad data may also be cached in-memory for 24 hours.
        - Graceful degradation: if Avito remains unavailable or the page cannot be parsed after retries, the service still creates an Ad with a placeholder title and empty image and returns 200 OK. In this case, the response includes `degraded: true` and optional `warnings`.
        - When MongoDB is unavailable, the service seamlessly uses an in-memory store with the same response contract (no additional fields). The ad is still returned with 200.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  example: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
      responses:
        '200':
          description: Resolved successfully (existing, newly created, or degraded)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  created:
                    type: boolean
                    description: Indicates whether a new Ad was created
                  ad:
                    $ref: '#/components/schemas/Ad'
                  degraded:
                    type: boolean
                    description: Indicates that the Ad was created in degraded mode due to source refusal or parsing failure
                    nullable: true
                  warnings:
                    type: array
                    items:
                      type: string
                    description: Optional warnings when degraded mode was used
              examples:
                created:
                  value:
                    success: true
                    created: true
                    ad:
                      _id: 65f2d1b2c8a4f21f1c111112
                      url: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
                      title: iPhone 14 128GB
                      image: https://example.cdn/iphone14.jpg
                      views: 0
                      createdAt: 2025-01-01T12:00:00.000Z
                existing:
                  value:
                    success: true
                    created: false
                    ad:
                      _id: 65f2d1b2c8a4f21f1c111113
                      url: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
                      title: iPhone 14 128GB
                      image: https://example.cdn/iphone14.jpg
                      views: 42
                      createdAt: 2025-01-01T12:00:00.000Z
                degraded:
                  value:
                    success: true
                    created: true
                    degraded: true
                    warnings:
                      - Avito rate-limited or blocked
                      - Details: HTTP 429 from source
                    ad:
                      _id: 65f2d1b2c8a4f21f1c111114
                      url: https://www.avito.ru/moskva/telefony/iphone_14_128gb_987654321
                      title: "Объявление Avito"
                      image: ""
                      views: 0
                      createdAt: 2025-01-01T12:10:00.000Z
        '400':
          description: Invalid input (e.g., invalid URL)
          content:
            application/json:
              examples:
                invalidUrl:
                  value:
                    success: false
                    error: URL must point to an Avito listing page
        '500':
          description: Server error (unexpected)
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: Resolve error: unexpected
  /ads:
    get:
      summary: List top ads by views
      description: |
        Returns ads sorted by views (desc) with pagination.
        When MongoDB is unavailable, results are served from an in-memory store with the same response contract.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Max items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Number of items to skip
      responses:
        '200':
          description: List of ads
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ad'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
              examples:
                success:
                  value:
                    success: true
                    data:
                      - _id: 65f2d1b2c8a4f21f1c111113
                        url: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
                        title: iPhone 14 128GB
                        image: https://example.cdn/iphone14.jpg
                        views: 42
                        createdAt: 2025-01-01T12:00:00.000Z
                      - _id: 65f2d1b2c8a4f21f1c111114
                        url: https://www.avito.ru/moskva/telefony/samsung_galaxy_123
                        title: Samsung Galaxy
                        image: https://example.cdn/galaxy.jpg
                        views: 30
                        createdAt: 2025-01-02T12:00:00.000Z
                    pagination:
                      total: 2
                      limit: 20
                      offset: 0
        '500':
          description: Server error (unexpected)
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: List error: unexpected
  /ads/{id}:
    get:
      summary: Get ad by id and increment views
      description: |
        Increments the ad views counter and returns the updated Ad. Works when MongoDB is unavailable by using an in-memory store with identical contract.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the Ad
      responses:
        '200':
          description: Ad found and views incremented
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  ad:
                    $ref: '#/components/schemas/Ad'
              examples:
                success:
                  value:
                    success: true
                    ad:
                      _id: 65f2d1b2c8a4f21f1c111113
                      url: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
                      title: iPhone 14 128GB
                      image: https://example.cdn/iphone14.jpg
                      views: 43
                      createdAt: 2025-01-01T12:00:00.000Z
        '400':
          description: Invalid id
          content:
            application/json:
              examples:
                invalid:
                  value:
                    success: false
                    error: Invalid ad id
        '404':
          description: Not found
          content:
            application/json:
              examples:
                notFound:
                  value:
                    success: false
                    error: Ad not found
        '500':
          description: Server error (unexpected)
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: GetById error: unexpected
  /ads/{id}/refresh:
    post:
      summary: Refresh ad data from source (Avito)
      description: |
        Forces a refresh of an existing Ad by fetching its original URL and attempting robust parsing.
        - On success (`ok: true`), updates title and image (image only if found) without worsening existing data.
        - On degraded parsing (temporary blocks, anti-bot, dynamic rendering), returns 200 with `degraded: true` and does not change stored data.
        - Works when MongoDB is unavailable by operating on an in-memory store with the same response contract.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the Ad
      responses:
        '200':
          description: Refresh completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  refreshed:
                    type: boolean
                    description: True if data was updated
                  degraded:
                    type: boolean
                    nullable: true
                    description: Present when parsing degraded
                  warnings:
                    type: array
                    items:
                      type: string
                    description: Present when degraded
                  ad:
                    $ref: '#/components/schemas/Ad'
              examples:
                refreshed:
                  value:
                    success: true
                    refreshed: true
                    ad:
                      _id: 65f2d1b2c8a4f21f1c111113
                      url: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
                      title: iPhone 14 256GB (updated)
                      image: https://example.cdn/iphone14-updated.jpg
                      views: 43
                      createdAt: 2025-01-01T12:00:00.000Z
                degraded:
                  value:
                    success: true
                    refreshed: false
                    degraded: true
                    warnings:
                      - Avito rate-limited or blocked or unreachable
                      - Details: HTTP 429 from source
                    ad:
                      _id: 65f2d1b2c8a4f21f1c111113
                      url: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
                      title: iPhone 14 128GB
                      image: https://example.cdn/iphone14.jpg
                      views: 43
                      createdAt: 2025-01-01T12:00:00.000Z
        '400':
          description: Invalid id
          content:
            application/json:
              examples:
                invalid:
                  value:
                    success: false
                    error: Invalid ad id
        '404':
          description: Ad not found
          content:
            application/json:
              examples:
                notFound:
                  value:
                    success: false
                    error: Ad not found
        '500':
          description: Server error (unexpected)
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: Refresh error: unexpected
  /ads/{id}/comments:
    get:
      summary: List comments for an ad
      description: Returns comments for a given ad id with pagination and sort by createdAt
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the Ad
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Max items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Number of items to skip
        - in: query
          name: sort
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
          description: Sort order by createdAt
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
                      sort:
                        type: string
                        enum: [ASC, DESC]
              examples:
                success:
                  value:
                    success: true
                    data:
                      - _id: 66f2d1b2c8a4f21f1c222201
                        ad: 65f2d1b2c8a4f21f1c111113
                        user:
                          _id: 65f2d1b2c8a4f21f1c101010
                          email: user1@example.com
                        text: Great price!
                        createdAt: 2025-01-02T12:01:00.000Z
                      - _id: 66f2d1b2c8a4f21f1c222202
                        ad: 65f2d1b2c8a4f21f1c111113
                        user:
                          _id: 65f2d1b2c8a4f21f1c101011
                          email: user2@example.com
                        text: Is it still available?
                        createdAt: 2025-01-02T12:05:00.000Z
                    pagination:
                      total: 2
                      limit: 20
                      offset: 0
                      sort: DESC
        '400':
          description: Invalid id
          content:
            application/json:
              examples:
                invalid:
                  value:
                    success: false
                    error: Invalid ad id
        '500':
          description: Server error
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: Failed to list comments
    post:
      summary: Add comment to ad (authorized)
      description: |
        Creates a comment for a given ad id. Only authorized users can post.
        Rate limit: not more than 5 comments in 5 minutes per user per ad.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text:
                  type: string
                  minLength: 1
                  example: Is the item available for pickup?
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  comment:
                    $ref: '#/components/schemas/Comment'
              examples:
                success:
                  value:
                    success: true
                    comment:
                      _id: 66f2d1b2c8a4f21f1c222203
                      ad: 65f2d1b2c8a4f21f1c111113
                      user:
                        _id: 65f2d1b2c8a4f21f1c101012
                        email: user3@example.com
                      text: Is the item available for pickup?
                      createdAt: 2025-01-03T10:00:00.000Z
        '400':
          description: Validation error
          content:
            application/json:
              examples:
                missingText:
                  value:
                    success: false
                    error: Text is required
                invalidAd:
                  value:
                    success: false
                    error: Invalid ad id
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    success: false
                    error: Unauthorized
        '404':
          description: Ad not found
          content:
            application/json:
              examples:
                notFound:
                  value:
                    success: false
                    error: Ad not found
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              examples:
                rateLimit:
                  value:
                    success: false
                    error: "Превышен лимит: не более 5 комментариев за 5 минут на одно объявление"
        '500':
          description: Server error
          content:
            application/json:
              examples:
                server:
                  value:
                    success: false
                    error: Failed to add comment
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Ad:
      type: object
      properties:
        _id:
          type: string
          example: 65f2d1b2c8a4f21f1c111111
        url:
          type: string
          example: https://www.avito.ru/moskva/telefony/iphone_14_128gb_123456789
        title:
          type: string
          example: iPhone 14 128GB
        image:
          type: string
          nullable: true
          example: https://example.cdn/iphone14.jpg
        views:
          type: integer
          example: 10
        createdAt:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        _id:
          type: string
          example: 66f2d1b2c8a4f21f1c222201
        ad:
          type: string
          example: 65f2d1b2c8a4f21f1c111113
        user:
          type: object
          properties:
            _id:
              type: string
              example: 65f2d1b2c8a4f21f1c101010
            email:
              type: string
              format: email
              example: user@example.com
        text:
          type: string
          example: Great price!
        createdAt:
          type: string
          format: date-time
security:
  - bearerAuth: []
